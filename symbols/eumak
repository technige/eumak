// Eumak European Keyboard Layout

// Copyright 2019, Nigel Small
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


// LEVELS 1 & 2
//
// ┌─────┐┌──────────────────────────────┐┌───────────────────────────────────────────────────┐
// │ 2 4 ││ 2 = Shift  │ 4 = Shift+AltGr ││    Mod+x -> áćéíĺńóŕśúẃýźőű  │ AltGr+AltMod ≡ Mod │
// │ 1 3 ││ 1 = Normal │ 3 = AltGr       ││ AltMod+x -> âêîôûŵŷ čďľňřšťž │ AltGr+Mod ≡ AltMod │
// └─────┘└──────────────────────────────┘└───────────────────────────────────────────────────┘
// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━━━━━━┓
// │ ¯ ´ │ ! ¡ │ " ² │ # ³ │ $ ¼ │ % ½ │ & ¾ │ / ÷ │ ( × │ ) · │ = ≡ │ ? ¿ │ * § ┃ ⌫ Backspace┃
// │ ^ ` │ 1 ~ │ 2 @ │ 3 £ │ 4 € │ 5 ° │ 6 µ │ 7 { │ 8 [ │ 9 ] │ 0 } │ ' \ │ + ± ┃            ┃
// ┢━━━━━┷━┱───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┺━┳━━━━━━━━━━┫
// ┃       ┃ Q Ą │ W Ẁ │ E È │ R Ę │ T Ț │ Y Ỳ │ U Ù │ I Ì │ O Ò │ P Ø │ Ü Å │ Ï Ÿ ┃ Enter    ┃
// ┃Tab ↹  ┃ q ą │ w ẁ │ e è │ r ę │ t ț │ y ỳ │ u ù │ i ì │ o ò │ p ø │ ü å │ ï ÿ ┃   ⏎      ┃
// ┣━━━━━━━┻━┱───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┺━┓        ┃
// ┃         ┃ A À │ S   │ D Đ │ F Ð │ G Þ │ H Ă │ J Ě │ K Ů │ L Ł │ Ö Œ │ Ä Æ │ Ë Ẅ ┃        ┃
// ┃Caps ⇬   ┃ a à │ s ß │ d đ │ f ð │ g þ │ h ă │ j ě │ k ů │ l ł │ ö œ │ ä æ │ ë ẅ ┃        ┃
// ┣━━━━━━━┯━┹───┬─┴───┬─┴───┬─┴───┬─┴───┬─┴───┬─┴───┬─┴───┬─┴───┬─┴───┬─┴───┲━┷━━━━━┻━━━━━━━━┫
// ┃       │     │ Z Ż │ X Ș │ C Ç │ V Ã │ B Õ │ N Ñ │ M ¶ │ ; « │ : » │ _ ¦ ┃                ┃
// ┃Shift ⇧│Mod ⇮│ z ż │ x ș │ c ç │ v ã │ b õ │ n ñ │ m µ │ , < │ . > │ - | ┃Shift ⇧         ┃
// ┣━━━━━━━╈━━━━━┷━┳━━━┷━━━┱─┴─────┴─────┴─────┴─────┴─────┴──┲━━┷━━━━┳┷━━━━━┻┳━━━━━━━┳━━━━━━━┫
// ┃       ┃       ┃       ┃ ␣                              ⍽ ┃       ┃       ┃       ┃       ┃
// ┃Ctrl   ┃Meta   ┃Alt    ┃ ␣           Space              ⍽ ┃AltGr ⇮┃AltMod⇮┃Menu   ┃Ctrl   ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹──────────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┻━━━━━━━┛

// LEVELS 3 & 4
//
// ┌─────┐
// │ 6 8 │   6 = Shift + Mod  , 8 = Shift + AltMod = Shift + AltGr + Mod
// │ 5 7 │   5 = Mod          , 7 = AltMod = AltGr + Mod
// └─────┘
// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━━━━━━┓
// │     │     │     │     │     │     │     │     │     │     │     │     │     ┃ ⌫ Backspace┃
// │     │     │     │     │     │     │     │     │     │     │     │     │     ┃            ┃
// ┢━━━━━┷━┱───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┺━┳━━━━━━━━━━┫
// ┃       ┃     │ Ẃ Ŵ │ É Ê │ Ŕ Ř │   Ť │ Ý Ŷ │ Ú Û │ Í Î │ Ó Ô │     │ Ű   │     ┃ Enter    ┃
// ┃Tab ↹  ┃     │ ẃ ŵ │ é ê │ ŕ ř │   ť │ ý ŷ │ ú û │ í î │ ó ô │     │ ű   │     ┃   ⏎      ┃
// ┣━━━━━━━┻━┱───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┺━┓        ┃
// ┃         ┃ Á Ǎ │ Ś Š │   Ď │     │     │     │     │     │ Ĺ Ľ │ Ő   │     │     ┃        ┃
// ┃Caps ⇬   ┃ á ǎ │ ś š │   ď │     │     │     │     │     │ ĺ ľ │ ő   │     │     ┃        ┃
// ┣━━━━━━━┳━┹───┬─┴───┬─┴───┬─┴───┬─┴───┬─┴───┬─┴───┬─┴───┬─┴───┬─┴───┬─┴───┲━┷━━━━━┻━━━━━━━━┫
// ┃       ┃     │ Ź Ž │     │ Ć Č │     │     │ Ń Ň │     │     │     │     ┃                ┃
// ┃Shift ⇧┃Mod ⇮│ ź ž │     │ ć č │     │     │ ń ň │     │     │     │     ┃Shift ⇧         ┃
// ┣━━━━━━━╋━━━━━┷━┳━━━┷━━━┱─┴─────┴─────┴─────┴─────┴─────┴──┲━━┷━━━━┳┷━━━━━┻┳━━━━━━━┳━━━━━━━┫
// ┃       ┃       ┃       ┃ ␣                              ⍽ ┃       ┃       ┃       ┃       ┃
// ┃Ctrl   ┃Meta   ┃Alt    ┃ ␣           Space              ⍽ ┃AltGr ⇮┃AltMod⇮┃Menu   ┃Ctrl   ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹──────────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┻━━━━━━━┛


default partial
xkb_symbols "basic" {

    include "eumak(mod_switch)"
    include "eumak(altgr_switch)"

    name[Group1] = "Normal";
    name[Group2] = "Alternate";


    // Symbols
    //
    key.type[Group1] = "FOUR_LEVEL";
    key.type[Group2] = "FOUR_LEVEL";
    //
    //           [======================================================================]
    //           [ Norm            , Shift          , Mod             , Shift+Mod       ]
    //           [======================================================================]
    key <TLDE> { [ asciitilde      , at             , dead_grave      , dead_grave      ] ,
                 [ grave           , degree         , dead_grave      , dead_grave      ] };
    //           [----------------------------------------------------------------------]
    key <AE01> { [ 1               , exclam         , dead_acute      , dead_acute      ] ,
                 [ acute           , exclamdown     , dead_acute      , dead_acute      ] };
    //           [----------------------------------------------------------------------]
    key <AE02> { [ 2               , quotedbl       , dead_caron      , dead_caron      ] ,
                 [ caron           , onehalf        , dead_caron      , dead_caron      ] };
    //           [----------------------------------------------------------------------]
    key <AE03> { [ 3               , numbersign     , dead_circumflex , dead_circumflex ] ,
                 [ asciicircum     , sterling       , dead_circumflex , dead_circumflex ] };
    //           [----------------------------------------------------------------------]
    key <AE04> { [ 4               , dollar         , dead_macron     , dead_macron     ] ,
                 [ macron          , EuroSign       , dead_macron     , dead_macron     ] };
    //           [----------------------------------------------------------------------]
    key <AE05> { [ 5               , percent        , dead_abovedot   , dead_abovedot   ] ,
                 [ abovedot        , section        , dead_abovedot   , dead_abovedot   ] };
    //           [----------------------------------------------------------------------]
    key <AE06> { [ 6               , ampersand      , dead_greek      , dead_greek      ] ,
                 [ mu              , paragraph      , dead_greek      , dead_greek      ] };
    //           [----------------------------------------------------------------------]
    key <AE07> { [ 7               , slash          ] ,
                 [ braceleft       , division       ] };
    //           [----------------------------------]
    key <AE08> { [ 8               , parenleft      ] ,
                 [ bracketleft     , multiply       ] };
    //           [----------------------------------]
    key <AE09> { [ 9               , parenright     ] ,
                 [ bracketright    , periodcentered ] };
    //           [----------------------------------]
    key <AE10> { [ 0               , equal          ] ,
                 [ braceright      , identical      ] };
    //           [----------------------------------]
    key <AE11> { [ apostrophe      , question       ] ,
                 [ backslash       , questiondown   ] };
    //           [----------------------------------]
    key <AE12> { [ plus            , asterisk       ] ,
                 [ plusminus       , dagger         ] };
    //           [==================================]
    //
    //           [==================================]
    //           [ Norm            , Shift          ]
    //           [==================================]
    key <AB08> { [ comma           , semicolon      ] ,
                 [ less            , guillemotleft  ] };
    //           [----------------------------------]
    key <AB09> { [ period          , colon          ] ,
                 [ greater         , guillemotright ] };
    //           [----------------------------------]
    key <AB10> { [ minus           , underscore     ] ,
                 [ bar             , brokenbar      ] };
    //           [==================================]

    // Letters
    //
    key.type[Group1] = "FOUR_LEVEL_ALPHABETIC";
    key.type[Group2] = "FOUR_LEVEL_ALPHABETIC";
    //
    //           [=======================================================]
    //           [ Norm       , Shift      , Mod          , Shift+Mod    ]
    //           [=======================================================]
    key <AD01> { [ q          , Q          , NoSymbol     , NoSymbol     ] ,
                 [ abreve     , Abreve     , abreveacute  , Abreveacute  ] };
    //           [-------------------------------------------------------]
    key <AD02> { [ w          , W          , wacute       , Wacute       ] ,
                 [ lstroke    , Lstroke    , NoSymbol     , NoSymbol     ] };
    //           [-------------------------------------------------------]
    key <AD03> { [ e          , E          , eacute       , Eacute       ] ,
                 [ eogonek    , Eogonek    , NoSymbol     , NoSymbol     ] };
    //           [-------------------------------------------------------]
    key <AD04> { [ r          , R          , racute       , Racute       ] ,
                 [ NoSymbol   , NoSymbol   , NoSymbol     , NoSymbol     ] };
    //           [-------------------------------------------------------]
    key <AD05> { [ t          , T          , NoSymbol     , NoSymbol     ] ,
                 [ U021B      , U021A      , NoSymbol     , NoSymbol     ] };  // U021A = Tcomma, U021B = tcomma
    //           [-------------------------------------------------------]
    key <AD06> { [ y          , Y          , yacute       , Yacute       ] ,
                 [ uring      , Uring      , NoSymbol     , NoSymbol     ] };
    //           [-------------------------------------------------------]
    key <AD07> { [ u          , U          , uacute       , Uacute       ] ,
                 [ uogonek    , Uogonek    , NoSymbol     , NoSymbol     ] };
    //           [-------------------------------------------------------]
    key <AD08> { [ i          , I          , iacute       , Iacute       ] ,
                 [ iogonek    , Iogonek    , NoSymbol     , NoSymbol     ] };
    //           [-------------------------------------------------------]
    key <AD09> { [ o          , O          , oacute       , Oacute       ] ,
                 [ oslash     , Oslash     , U01FF        , U01FE        ] };  // U01FE = Oslashacute, U01FF = oslashacute
    //           [-------------------------------------------------------]
    key <AD10> { [ p          , P          , U1E55        , U1E54        ] ,   // U1E54 = Pacute, U1E55 = pacute
                 [ otilde     , Otilde     , U1E4D        , U1E4C        ] };  // U1E4C = Otildeacute, U1E4D = otildeacute
    //           [-------------------------------------------------------]
    key <AD11> { [ udiaeresis , Udiaeresis , udoubleacute , Udoubleacute ] ,
                 [ aring      , Aring      , U01FB        , U01FA        ] };  // U01FA = Aringacute, U01FB = aringacute
    //           [-------------------------------------------------------]
    key <AD12> { [ idiaeresis , Idiaeresis , NoSymbol     , NoSymbol     ] ,
                 [ ydiaeresis , Ydiaeresis , NoSymbol     , NoSymbol     ] };
    //           [=======================================================]
    //
    //           [=======================================================]
    //           [ Norm       , Shift      , Mod          , Shift+Mod    ]
    //           [=======================================================]
    key <AC01> { [ a          , A          , aacute       , Aacute       ] ,
                 [ aogonek    , Aogonek    , NoSymbol     , NoSymbol     ] };
    //           [-------------------------------------------------------]
    key <AC02> { [ s          , S          , sacute       , Sacute       ] ,
                 [ U0219      , U0218      , NoSymbol     , NoSymbol     ] };  // U0218 = Scomma, U0219 = scomma
    //           [-------------------------------------------------------]
    key <AC03> { [ d          , D          , NoSymbol     , NoSymbol     ] ,
                 [ dstroke    , Dstroke    , NoSymbol     , NoSymbol     ] };
    //           [-------------------------------------------------------]
    key <AC04> { [ f          , F          , NoSymbol     , NoSymbol     ] ,
                 [ eth        , ETH        , NoSymbol     , NoSymbol     ] };
    //           [-------------------------------------------------------]
    key <AC05> { [ g          , G          , U01F5        , U01F4        ] ,   // U01F4 = Gacute, U01F5 = gacute
                 [ gcedilla   , Gcedilla   , NoSymbol     , NoSymbol     ] };
    //           [-------------------------------------------------------]
    key <AC06> { [ h          , H          , NoSymbol     , NoSymbol     ] ,
                 [ hstroke    , Hstroke    , NoSymbol     , NoSymbol     ] };
    //           [-------------------------------------------------------]
    key <AC07> { [ j          , J          , NoSymbol     , NoSymbol     ] ,
                 [ ntilde     , Ntilde     , NoSymbol     , NoSymbol     ] };
    //           [-------------------------------------------------------]
    key <AC08> { [ k          , K          , U1E31        , U1E30        ] ,   // U1E30 = Kacute, U1E31 = kacute
                 [ kcedilla   , Kcedilla   , NoSymbol     , NoSymbol     ] };
    //           [-------------------------------------------------------]
    key <AC09> { [ l          , L          , lacute       , Lacute       ] ,
                 [ lcedilla   , Lcedilla   , NoSymbol     , NoSymbol     ] };
    //           [-------------------------------------------------------]
    key <AC10> { [ odiaeresis , Odiaeresis , odoubleacute , Odoubleacute ] ,
                 [ oe         , OE         , NoSymbol     , NoSymbol     ] };
    //           [-------------------------------------------------------]
    key <AC11> { [ adiaeresis , Adiaeresis , NoSymbol     , NoSymbol     ] ,
                 [ ae         , AE         , U01FD        , U01FC        ] };  // U01FC = AEacute, U01FD = aeacute
    //           [-------------------------------------------------------]
    key <AC12> { [ ediaeresis , Ediaeresis , NoSymbol     , NoSymbol     ] ,
                 [ wdiaeresis , Wdiaeresis , NoSymbol     , NoSymbol     ] };
    //           [=======================================================]
    //
    //           [=======================================================]
    //           [ Norm       , Shift      , Mod          , Shift+Mod    ]
    //           [=======================================================]
    key <AB01> { [ z          , Z          , zacute       , Zacute       ] ,
                 [ ssharp     , U1E9E      , NoSymbol     , NoSymbol     ] };  // U1E9E = Ssharp
    //           [-------------------------------------------------------]
    key <AB02> { [ x          , X          , NoSymbol     , NoSymbol     ] ,
                 [ NoSymbol   , NoSymbol   , NoSymbol     , NoSymbol     ] };
    //           [-------------------------------------------------------]
    key <AB03> { [ c          , C          , cacute       , Cacute       ] ,
                 [ ccedilla   , Ccedilla   , U1E09        , U1E08        ] };  // U1E08 = Ccedillaacute, U1E09 = ccedillaacute
    //           [-------------------------------------------------------]
    key <AB04> { [ v          , V          , NoSymbol     , NoSymbol     ] ,
                 [ thorn      , THORN      , NoSymbol     , NoSymbol     ] };
    //           [-------------------------------------------------------]
    key <AB05> { [ b          , B          , NoSymbol     , NoSymbol     ] ,
                 [ atilde     , Atilde     , NoSymbol     , NoSymbol     ] };
    //           [-------------------------------------------------------]
    key <AB06> { [ n          , N          , nacute       , Nacute       ] ,
                 [ ncedilla   , Ncedilla   , NoSymbol     , NoSymbol     ] };
    //           [-------------------------------------------------------]
    key <AB07> { [ m          , M          , U1E3F        , U1E3E        ] ,   // U1E3E = Macute, U1E3F = macute
                 [ NoSymbol   , NoSymbol   , NoSymbol     , NoSymbol     ] };
    //           [=======================================================]

};

// The [Mod] key (while pressed) chooses the third shift level.
partial modifier_keys
xkb_symbols "mod_switch" {
    include "level3(modifier_mapping)"
    key <LSGT> {
      type[Group1] = "ONE_LEVEL",
      symbols[Group1] = [ ISO_Level3_Shift ]
    };
};

// The Right Alt key (while pressed) chooses group 2.
partial modifier_keys
xkb_symbols "altgr_switch" {
    key <RALT> {
        type[Group1] = "ONE_LEVEL",
        symbols[Group1] = [ ISO_Group_Shift ]
    };
};

